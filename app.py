import streamlit as st
import pickle
import numpy as np
import re
import string
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
import nltk

# T√©l√©chargement silencieux des ressources NLTK n√©cessaires
for resource in ['punkt', 'punkt_tab', 'stopwords', 'wordnet', 'omw-1.4']:
    try:
        nltk.data.find(resource)
    except LookupError:
        nltk.download(resource, quiet=True)

# Configuration de la page
st.set_page_config(
    page_title="Analyse de Sentiment Twitter",
    page_icon="üòä",
    layout="centered"
)

# Titre et description
st.title("üìä Analyse de Sentiment Twitter")
st.markdown("""
Cette application utilise un mod√®le de Machine Learning (Naive Bayes) entra√Æn√© sur plus d'un million de tweets
pour analyser le sentiment d'un texte. Le mod√®le peut pr√©dire si un texte est :
- üòä Positif
- üòû N√©gatif
""")

def clean_text(text):
    """Nettoie le texte en entr√©e"""
    if not isinstance(text, str):
        return ""
    
    # Conversion en minuscules
    text = text.lower()
    
    # Suppression des URLs
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
    
    # Suppression des mentions et hashtags
    text = re.sub(r'@\w+|#\w+', '', text)
    
    # Suppression des chiffres
    text = re.sub(r'\d+', '', text)
    
    # Suppression de la ponctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    
    # Suppression des espaces multiples
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def preprocess_text(text):
    """Pr√©traite le texte en entr√©e"""
    if not isinstance(text, str):
        return ""
    
    # V√©rifie et t√©l√©charge 'punkt' si besoin
    try:
        nltk.data.find('tokenizers/punkt')
    except LookupError:
        nltk.download('punkt', quiet=True)
    
    # Tokenisation
    tokens = word_tokenize(text)
    
    # Suppression des stopwords et lemmatisation
    lemmatizer = WordNetLemmatizer()
    stop_words = set(stopwords.words('english'))
    
    processed_tokens = [
        lemmatizer.lemmatize(word)
        for word in tokens
        if word not in stop_words and len(word) > 1
    ]
    
    return ' '.join(processed_tokens)

# Chargement du mod√®le et du vectoriseur
@st.cache_resource
def load_model():
    with open('models/twitter_mnb_model.pkl', 'rb') as f:
        model = pickle.load(f)
    with open('models/twitter_tfidf_vectorizer.pkl', 'rb') as f:
        vectorizer = pickle.load(f)
    return model, vectorizer

# Interface utilisateur
text_input = st.text_area("Entrez votre texte ici :", height=150)

if st.button("Analyser le sentiment"):
    if text_input:
        # Pr√©traitement du texte
        cleaned_text = clean_text(text_input)
        processed_text = preprocess_text(cleaned_text)
        
        # Chargement du mod√®le
        model, vectorizer = load_model()
        
        # Pr√©diction
        text_vectorized = vectorizer.transform([processed_text])
        prediction = model.predict(text_vectorized)[0]
        
        # Affichage du r√©sultat
        st.markdown("---")
        
        # D√©finition des √©mojis et couleurs selon le sentiment
        sentiment_emojis = {
            'positive': 'üòä',
            'negative': 'üòû'
        }
        
        sentiment_colors = {
            'positive': 'green',
            'negative': 'red'
        }
        
        # Affichage du r√©sultat principal
        st.markdown(f"""
        <div style='text-align: center; padding: 20px; border-radius: 10px; background-color: {sentiment_colors[prediction]}20;'>
            <h2 style='margin: 0;'>{sentiment_emojis[prediction]} Sentiment : {prediction.upper()} {sentiment_emojis[prediction]}</h2>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("Veuillez entrer un texte √† analyser.")

# Section explicative
with st.expander("‚ÑπÔ∏è Comment fonctionne cette application ?"):
    st.markdown("""
    ### Le mod√®le derri√®re l'application
    
    Cette application utilise un mod√®le Naive Bayes Multinomial entra√Æn√© sur plus d'un million de tweets. Voici comment il fonctionne :
    
    1. **Pr√©traitement du texte** :
       - Le texte est nettoy√© (suppression des URLs, mentions, hashtags, etc.)
       - Les mots sont lemmatis√©s (r√©duits √† leur racine)
       - Les stopwords sont supprim√©s
    
    2. **Vectorisation** :
       - Le texte est transform√© en vecteurs num√©riques via TF-IDF
       - Utilisation de bigrammes pour capturer plus de contexte
       - Vocabulaire de 10,000 termes les plus pertinents
    
    3. **Pr√©diction** :
       - Le mod√®le Naive Bayes utilise ces vecteurs pour pr√©dire le sentiment
       - Il peut classer le texte en deux cat√©gories : positif ou n√©gatif
    
    ### Performance du mod√®le
    
    Le mod√®le atteint une pr√©cision d'environ 80% sur l'ensemble de test, ce qui est un excellent r√©sultat pour une t√¢che de classification de sentiment.
    """) 